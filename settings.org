Emacs configuration
* Sections
  :PROPERTIES:
  :VISIBILITY: children
  :END:

** Shortcut to config file
#+BEGIN_SRC emacs-lisp
;; Open this config file
(global-set-key (kbd "C-c s")
		(lambda () (interactive) (find-file "~/.emacs.d/settings.org")))
#+END_SRC
** Basics
*** GUI stuff
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'tooltip-mode) (tooltip-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (add-hook 'window-setup-hook 'toggle-frame-maximized t))

;; Another wy to make fullscreen
;(add-to-list 'default-frame-alist '(fullscreen . maximized))

#+END_SRC

*** MELPA and other repositories
#+BEGIN_SRC emacs-lisp
;; Emacs lisp files
(add-to-list 'load-path "~/.emacs.d/elisp/")

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/") t)

(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

*** Use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure t)
(setq use-package-verbose t)

(require 'use-package)
#+END_SRC

*** Server stuff
#+BEGIN_SRC emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+END_SRC

*** General defaults
#+BEGIN_SRC emacs-lisp
;; Send customizations to another file and load that file
(setq initial-scratch-message nil)  ;; No scratch buffer message
(setq initial-major-mode 'org-mode)

(column-number-mode)

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; nice scrolling
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

(add-hook 'comint-exec-hook
      (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))

;; kill process buffer without confirmation
(setq kill-buffer-query-functions
      (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

;; Remove text in active region if inserting text
(delete-selection-mode 1)

;; Type face size stuff
(set-face-attribute 'default nil :height 150)

;; Save backups elsewhere
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

(setq is-work (equal system-name "ethan-work"))

;; Show battery percentage and remaining time
(unless is-work
  (setq battery-mode-line-format "[%b%p%% %t]")
  (display-battery-mode 1))

;; Enable show-paren-mode
(show-paren-mode 1)

;; Enable word-wrapping
(global-visual-line-mode t)

;; Highlight lines (with some themes this is distracting, disable if necessary)
(global-hl-line-mode t)

(setq set-mark-command-repeat-pop t)

(global-auto-revert-mode)
#+END_SRC

*** Electric-pair
#+BEGIN_SRC emacs-lisp
(when (load "elec-pair" t t)
  (electric-pair-mode 1))

(defvar es/electic-pair-modes '(python-mode org-mode lisp-interaction-mode emacs-lisp-mode tenjin-mode))

(defun es/inhibit-electric-pair-mode (char)
  (not (member major-mode es/electic-pair-modes)))

(setq electric-pair-inhibit-predicate #'es/inhibit-electric-pair-mode)
#+END_SRC

*** History and auto-save
#+BEGIN_SRC emacs-lisp
(setq savehist-file "/home/ethan/.emacs.d/savehist")
(savehist-mode 1)
;; t means no truncation
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

(setq auto-save-file-name-transforms '((".*" "/home/ethan/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** Scratch files
#+BEGIN_SRC emacs-lisp
(defun es/make-scratch-buffer ()
  "makes a new scratch buffer, uniquely named"
  (interactive)
  (switch-to-buffer "_scratch")
  (rename-uniquely)
  (funcall (and initial-major-mode)))
#+END_SRC

*** utf-8
#+BEGIN_SRC emacs-lisp
;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
#+END_SRC
** Visuals
*** Theme
#+BEGIN_SRC emacs-lisp
(use-package atom-one-dark-theme
  :disabled t
  :init
  (load-theme 'atom-one-dark t)
  )

(use-package ample-theme
  :disabled t
  :init
  (custom-theme-set-faces
   'ample
   '(org-warning ((t (:foreground "#528fd1")))))
  )

(use-package aurora-theme
  :init
  (load-theme 'aurora t)
  )

(use-package darktooth-theme
  :disabled t
  )

(use-package zenburn-theme
  :disabled t
  )


;; THEME switching stuff from Daniel Mai
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "C-`" 'switch-theme)
#+END_SRC
*** Fill-column-indicator
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :config
    (add-hook 'python-mode-hook 'fci-mode)
    (setq-default fill-column 80)
    (setq-default fci-rule-color "#546D7A"))
#+END_SRC

*** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Fixmee-mode
#+BEGIN_SRC emacs-lisp
(use-package fixmee
  :config
  (add-hook 'python-mode-hook 'fixmee-mode)
  )
#+END_SRC

*** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:init
(setq org-bullets-bullet-list
'("◉" "◎" "⚫" "○" "►" "◇"))
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
#+END_SRC
** Keybindings
*** Assorted key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o") 'browse-url-of-file)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-\-") 'text-scale-decrease)
(global-set-key "\C-xp" 'pop-to-mark-command)
(define-key dired-mode-map "b" 'dired-up-directory)
;; Don't suspended when I accidently hit C-z
(global-unset-key (kbd "C-z"))
#+END_SRC

*** Key-chord
#+BEGIN_SRC emacs-lisp
(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(use-package key-chord
  :init
  (progn
    (key-chord-mode 1)
    (key-chord-define-global ";f" 'flip-frame)
    (key-chord-define-global ";t" 'elpy-test-pytest-runner)
    (key-chord-define-global "jj" 'helm-projectile-find-file)
    (key-chord-define-global "JJ" 'helm-projectile-find-file-in-known-projects)
    (key-chord-define-global "BB" 'my/switch-to-previous-buffer)
    (key-chord-define-global "MM" 'hydra-modes/body)
    (key-chord-define-global "FF" 'delete-other-windows)
    (key-chord-define-global "GG" 'magit-status)
    (key-chord-define-global "SS" 'helm-swoop-back-to-last-point)
    )
  )
#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer t
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hydras!

(defhydra hydra-vc ()
  "vc hydra"
  ("n" git-gutter+-next-hunk  "next hunk")
  ("p" git-gutter+-previous-hunk "previous hunk")
  ("d" git-gutter+-show-hunk "show diff")
  ("r" git-gutter+-revert-hunk "revert hunk")
  ("b" magit-blame "blame")
  ("t" git-timemachine "timemachine" :exit t)
  )

(global-set-key (kbd "<f8>") 'hydra-vc/body)

(use-package transpose-frame)

(defhydra hydra-transpose ()
  "transposing hydra"
  ("l" transpose-lines "lines")
  ("w" transpose-words "words")
  ("s" transpose-sexps "sexps")
  ("p" transpose-paragraphs "paragraphs")
  ("c" transpose-chars "characters")
  ("W" transpose-frame "windows")
  )

(global-set-key (kbd "C-t") 'hydra-transpose/body)

(defhydra hydra-settings (global-map "<f5>")
  "settings hydra"
  ("n" linum-mode "line numbers")
  ("v" visual-line-mode "visual line")
  ("s" sr-speedbar-toggle "speedbar")
  )

(defhydra hydra-modes ()
  "settings hydra"
  ("l" lisp-interaction-mode "lisp interaction")
  ("p" python-mode "python")
  ("o" org-mode "org")
  ("s" sql-mysql "MySQL interaction" :exit t)
  ("x" sx-compose-mode "Stack Exhange compose")
  ("m" gfm-mode "Markdown")
  )

(global-set-key (kbd "s-M") 'hydra-modes/body)
#+END_SRC

** Org
*** General settings
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
(setq org-hide-leading-stars t)
(add-hook 'org-mode-hook 'org-indent-mode)

;; Open .org and .txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

;; This makes it so I can have check boxes auto-uncheck when
;; repeating task is completed
(require 'org-checklist)
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(define-key org-agenda-mode-map "d" 'org-agenda-deadline)
(define-key org-agenda-mode-map "s" 'org-agenda-schedule)

;; Open this config file
(global-set-key (kbd "C-c s")
		(lambda () (interactive) (find-file "~/.emacs.d/settings.org")))

;; bindings for capture templates
(define-key global-map "\C-ci" ;inbox
  (lambda () (interactive) (org-capture nil "i")))
(define-key global-map "\C-cnn" ;new note
  (lambda () (interactive) (org-capture nil "n")))
#+END_SRC

*** TODOs
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
;; (setq org-enforce-todo-checkbox-dependencies t)

;; Set to 'invisible and blocked tasks wont show up in agenda, t and they will be dimmed
(setq org-agenda-dim-blocked-tasks 'invisible)

;; Don't keep track of completed repeating tasks
(setq org-log-repeat nil)
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
;; Enable highlight line only for org-agenda-mode (it is annoying in other modes)
(add-hook 'org-agenda-mode-hook 'hl-line-mode)

;; Make agenda full screen without typing 'o'
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))

(defun es/skip-unless-work ()
  "Skip trees that are not waiting"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (re-search-forward ":work:" subtree-end t)
	nil ; tag found, do not skip
      subtree-end))) ; tag not found, continue after end of subtree

;; Block agenda view for agenda and unscheduled tasks
(setq org-agenda-custom-commands
      '(("j" "Agenda and unscheduled tasks"
	 ((tags-todo
	   "-DEADLINE={.+}-SCHEDULED={.+}-dad-mom-beilei-someday-emacs-projects-work")
	  (agenda ""))
	 ((org-agenda-start-on-weekday nil)
	  (org-deadline-warning-days 0)))
	("w" "Work tasks"
	 ((tags-todo
	   "-DEADLINE={.+}-SCHEDULED={.+}-dad-mom-beilei-someday-emacs-projects")
	  (agenda ""))
	 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp ":home:"))
	  (org-agenda-start-on-weekday nil)
	  (org-agenda-ndays 1)
	  (org-deadline-warning-days 0)))
	("f" "Talking points"
         ((tags-todo "+beilei")
          (tags-todo "+mom")
          (tags-todo "+dad"))
	 ((org-agenda-prefix-format "- ")
	  (org-show-context-detail 'minimal)
	  (org-agenda-todo-keyword-format "")))
	(";" "Someday and projects"
	 ((tags-todo "+someday+projects"))
	 ((org-agenda-prefix-format "- ")
	  (org-show-context-detail 'minimal)
	  (org-agenda-remove-tags t)
	  (org-agenda-todo-keyword-format "")))
	("l" "Emacs"
	 ((tags-todo "+emacs"))
	 ((org-agenda-prefix-format "- ")
	  (org-show-context-detail 'minimal)
	  (org-agenda-remove-tags t)
	  (org-agenda-todo-keyword-format "")))
	("2" "Mobile tasks"
	 ((tags "-DEADLINE={.+}-SCHEDULED={.+}/+TODO")
	  (agenda ""))
	 ((org-agenda-prefix-format "- ")
	  (org-agenda-todo-keyword-format "")
	  (org-agenda-start-on-weekday nil)
	  (org-agenda-ndays 3)
	  (org-deadline-warning-days 0))
         ("~/Dropbox/org_files/taskpaper_files/da_guai.taskpaper"))))

  (setq org-agenda-files '("~/Dropbox/org_files/da_guai.org"
                           "~/Dropbox/org_files/talkingpoints.org"))

  ;; Only ask for confirmation of kills within agenda
  ;; only if TODO spans more than 2 lines
  (setq org-agenda-confirm-kill 2)

  (setq org-deadline-warning-days 3)
#+END_SRC

*** Habits
#+BEGIN_SRC emacs-lisp
(require 'org-habit)
#+END_SRC

*** Capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    '(("i" "New TODO to Uncategorized TODOs" entry (file+headline
      "~/Dropbox/org_files/da_guai.org" "Uncategorized TODOs")
      "* TODO %?" :kill-buffer t)

    ("n" "New note to xnotes.org" entry (file
     "~/Dropbox/org_files/xnotes.org")
     "* %T\n\n%i%?" :prepend t :empty-lines 1)

    ("w" "New work note" entry (file
      "~/Dropbox/org_files/worknotes.org")
      "* %T\n\n%i%?" :kill-buffer t :prepend t :empty-lines 1)

    ("d" "New daydayup entry" entry (file
      "~/Dropbox/org_files/daydayup.org")
      "* %T\n\n%?" :kill-buffer t :prepend t :empty-lines 1)))
#+END_SRC

*** Sync

The code below runs a python script that parses the tasks in my org files
and saves them in .taskpaper format to a file that can be accessed on my
phone.

#+BEGIN_SRC emacs-lisp
  (defun sync-to-taskpaper ()
    "Sync org file to taskpaper file for mobile access"
    (when (file-equal-p buffer-file-name "/home/ethan/Dropbox/org_files/da_guai.org")
      (shell-command "~/corgi.sh taskpapersync")))

  (add-hook 'after-save-hook #'sync-to-taskpaper)

  (defun sync-with-corgi ()
    "Sync org file with to_sync.txt from corgi capture and mobile capture"
    (when (window-system nil)
      (message (shell-command-to-string "~/corgi.sh orgsync"))))

  (add-hook 'after-init-hook #'sync-with-corgi)
#+END_SRC

*** make things look nice
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
#+END_SRC

*** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (sh . t)))
#+END_SRC
** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :defer t
    :commands deft-new-file-named
    :config
    (setq deft-directory "~/Dropbox/org_files")
    (setq deft-default-extension "org")
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filename-as-title t)
    (setq deft-use-filter-string-for-filename t)
    :bind (("C-c d" . deft)))
  ;;(setq deft-auto-save-interval 0)

(defun es/make-scratches-in-deft ()
  "save a new file to deft with a unique name based on current time

The file will be uniquely named with xscratch + yeardatehourminutesecond"
  (interactive)
  (let ((today-string (concat (substring (current-time-string) 20)
                  (substring (current-time-string) 4 7)
			      (substring (current-time-string) 8 10)
			      (substring (current-time-string) 11 13)
			      (substring (current-time-string) 14 16)
			      (substring (current-time-string) 17 19))))
    (deft-new-file-named (concat "xscratch" today-string))))

(global-set-key (kbd "<f9>") 'es/make-scratches-in-deft)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer t
  :diminish projectile-mode
  :config
  (progn
    (setq projectile-enable-caching t)
    (setq projectile-indexing-method 'alien)
    (setq projectile-completion-system 'default)
    (setq projectile-switch-project-action 'helm-projectile)
    (projectile-global-mode)))

(use-package helm-projectile
  :defer t
  :init
  (helm-projectile-on))
#+END_SRC

** Navigation
*** Custom functions for navigation
#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)

(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

*** Helm-swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :config
  (setq helm-multi-swoop-edit-save t)
  (setq helm-swoop-move-to-line-cycle nil)
  (setq helm-swoop-use-line-number-face t)
  ;; disable pre-input, but set input to selection if there is one
  (setq helm-swoop-pre-input-function (lambda () ""))
  :bind (("C-s" . helm-swoop)
	 )
  )
#+END_SRC

*** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    ;;(require 'helm-config)
    (helm-mode 1)
    (setq helm-recentf-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-completion-in-region-fuzzy-match t
	  helm-mode-fuzzy-match t
	  helm-recentf-fuzzy-match t
	  helm-M-x-fuzzy-match t)
    (add-to-list 'helm-completing-read-handlers-alist '(find-file . helm-completing-read-symbols))
    (setq helm-source-recentf
	  (helm-make-source "Recentf" 'helm-recentf-source
	    :fuzzy-match t))
    :bind (("C-x b" . helm-mini)
           ("C-x f" . helm-recentf)
	   ("M-x" .  helm-M-x)
           ("M-y" . helm-show-kill-ring)))
#+END_SRC

*** Helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :defer t
  :config
  (setq helm-ag-insert-at-point 'symbol)
  )
#+END_SRC

*** Ace-jump-mode
#+BEGIN_SRC emacs-lisp
;;
;; ace jump mode major function
;;
(add-to-list 'load-path "/home/ethan/.emacs.d/elisp/ace-jump-mode/")
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)

;; you can select the key you prefer to
;;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(global-set-key (kbd "M-s") 'ace-jump-mode)

;;
;; enable a more powerful jump back function from ace jump mode
;;
(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(setq ace-jump-mode-submode-list '(ace-jump-char-mode ace-jump-line-mode ace-jump-word-mode))
#+END_SRC

*** Smartscan
#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :init
  (global-smartscan-mode 1)
  )
#+END_SRC
*** Registers and bookmarks
#+BEGIN_SRC emacs-lisp
(defhydra hydra-register (global-map "<f1>")
  "register hydra"
  ("r" point-to-register "point")
  ("j" jump-to-register "jump")
  ("t" copy-to-register "copy text")
  ("i" insert-register "insert text")
  ("a" append-to-register "append text")
  ("p" prepend-to-register "prepend text")
  )

(defun my/quick-save-bookmark ()
  "Save bookmark with name as 'buffer:row:col'"
  (interactive)
  (bookmark-set (format "%s:%s:line %s:column %s"
			(thing-at-point 'symbol)
			(buffer-name)
			(line-number-at-pos)
			(current-column)))
  (message "Bookmarked saved at current position"))

(global-set-key (kbd "C-S-b") 'my/quick-save-bookmark)
(bind-key "<menu>" 'helm-bookmarks)
#+END_SRC

** Languages
*** Python
#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-line-or-region ()
  "Comments or uncomments the current line or region."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (if (save-excursion (beginning-of-line) (looking-at "[[:space:]]*$"))
	(comment-dwim nil)
      (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))

(global-set-key (kbd "M-;") 'comment-or-uncomment-line-or-region)

;; (defun goto-def-or-rgrep ()
;;   "Go to definition of thing at point or do an rgrep in project if that fails"
;;   (interactive)
;;   (condition-case nil (elpy-goto-definition)
;;     (error (elpy-rgrep-symbol (concat "\\(def\\|class\\)\s" (thing-at-point 'symbol) "(")))))

(defun elpy-goto-definition-or-rgrep ()
  "Go to the definition of the symbol at point, if found. Otherwise, run `elpy-rgrep-symbol'.

This first tries `elpy-goto-definition' on the symbol. If it fails to find the definition
it passes the symbol, wrapped in a regexp for class/function definitions, off to `elpy-rgrep-symbol'"
    (interactive)
    (ring-insert find-tag-marker-ring (point-marker))
    (condition-case nil (elpy-goto-definition)
        (error (elpy-rgrep-symbol
                   (concat "\\(def\\|class\\)\s" (thing-at-point 'symbol) "(")))))

(use-package elpy
  :init
  (elpy-enable)
  (setq elpy-rpc-timeout nil)
  (setq elpy-rpc-backend "jedi")  ; "rope" is another possibility
  (elpy-use-ipython)
  (setq elpy-rgrep-file-pattern "*.py *.pyx *.kv *.rst *.tpl")
  (add-to-list 'auto-mode-alist '("\\.pyx\\'" . python-mode))
  (add-to-list 'auto-mode-alist '("\\.pdbrc\\'" . python-mode))
  (setenv "PYTHONPATH" "/home/ethan/Dropbox/development/kivy_fork/kivy")
  (add-hook 'python-mode-hook 'visual-line-mode)
  (setq python-check-command "flake8")
  :config
  (define-key elpy-mode-map (kbd "M-.") 'elpy-goto-definition-or-rgrep)
  )

(require 'tenjin-mode)
(add-to-list 'auto-mode-alist '("\\.tpl\\'" . tenjin-mode))
#+END_SRC

**** Pdb
#+BEGIN_SRC emacs-lisp
(add-hook 'gud-mode-hook 'hl-line-mode)
#+END_SRC

*** Yaml-mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :config
  (add-hook 'yaml-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-c C-s") 'elpy-rgrep-symbol)))
  (add-to-list 'auto-mode-alist '("\\.kv\\'" . yaml-mode))
  )
#+END_SRC

*** Lisp
**** Slime
#+BEGIN_SRC emacs-lisp
(setq inferior-lisp-program "/usr/bin/sbcl")
#+END_SRC

**** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package "eldoc"
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :defer t
  :init
  (progn
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)))
#+END_SRC

*** SQL
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :init (yas-global-mode 1)
  :config
  (progn
    (yas-global-mode)
    (add-hook 'term-mode-hook (lambda()
				(setq yas-dont-activate t)))
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "SPC") #'yas-expand)
    (yas-global-mode 1)))
#+END_SRC
** Version control
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (setq magit-push-current-set-remote-if-missing nil)
    :config
    (setq magit-push-always-verify nil)
    :bind ("C-c g" . magit-status))
#+END_SRC

*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter+
  :init
  (global-git-gutter+-mode)
  :config
  (use-package git-gutter-fringe+)
  :diminish (git-gutter+-mode . "gg")
  )
#+END_SRC

*** Diff-hl
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :disabled t
  :init
  (global-diff-hl-mode t)
  ;; :bind (("<f8>" . diff-hl-next-hunk)
  ;; 	 ("<f7>" . diff-hl-previous-hunk)
  ;; 	 ("C-x v =" . diff-hl-diff-goto-hunk)
  ;; 	 ("C-?" . diff-hl-revert-hunk)
  ;; 	 )
  )
#+END_SRC

*** Git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  )
#+END_SRC
** Editing
*** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :defer t
    :bind ("M-SPC" . er/expand-region))
#+END_SRC

*** Syntax-subword

This mode allows more fine-grained movement and editing commands

#+BEGIN_SRC emacs-lisp
(use-package syntax-subword
  :ensure t
  :init
  (setq syntax-subword-skip-spaces t)
  :config
  (global-syntax-subword-mode))
#+END_SRC

*** Wrap-region
#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :ensure t
  :config
  (wrap-region-add-wrappers
   '(("(" ")" nil (python-mode org-mode lisp-mode))
     ("'" "'" nil python-mode)
     ("`" "`" nil (org-mode sql-mode sql-interactive-mode gfm-mode))
     ("\"" "\"" nil (org-mode python-mode lisp-mode sql-mode))))
  (add-hook 'org-mode-hook 'wrap-region-mode)
  (add-hook 'python-mode-hook 'wrap-region-mode)
  (add-hook 'lisp-mode-hook 'wrap-region-mode))
#+END_SRC

*** Multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("M-N" . mc/mark-next-like-this)
	 ("M-P". mc/mark-previous-like-this)
	 ("C-S-<mouse-1> " . mc/add-cursor-on-click)))
#+END_SRC

*** Fly spell
#+BEGIN_SRC emacs-lisp
  ;; Enable flyspell-mode
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook  'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  :disabled t
  (global-flycheck-mode)
  )
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode 1)
  (setq company-idle-delay 0)
  (setq company-tooltip-limit 5)
  (setq company-minimum-prefix-length 3)
  (setq company-tooltip-flip-when-above t)
  )

#+END_SRC
*** Auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (require 'auto-complete-config)
    (add-to-list 'ac-dictionary-directories "~/.emacs.d/es-ac-dict")
    (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
    (add-to-list 'ac-modes 'sql-interactive-mode)
    (add-hook 'sql-interactive-mode-hook (lambda () (auto-complete-mode 1) (company-mode)))
)
#+END_SRC
*** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
  :bind ("C-/" . undo-tree-undo)
  )
#+END_SRC

*** Copy line
#+BEGIN_SRC emacs-lisp
 (defun copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring.
    Ease of use features:
    - Move to start of next line.
    - Appends the copy on sequential calls.
    - Use newline as last char even on the last line of the buffer.
    - If region is active, copy its lines."
  (interactive "p")
  (let ((beg (line-beginning-position))
	(end (line-end-position arg)))
    (when mark-active
      (if (> (point) (mark))
	  (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
	(setq end (save-excursion (goto-char (mark)) (line-end-position)))))
    (if (eq last-command 'copy-line)
	(kill-append (buffer-substring beg end) (< end beg))
      (kill-ring-save beg end)))
  (kill-append "\n" nil)
  (beginning-of-line (or (and arg (1+ arg)) 2))
  (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

(global-set-key (kbd "C-S-l") 'copy-line)

#+END_SRC
*** Editor-config
#+BEGIN_SRC emacs-lisp
(load "editorconfig")
(editorconfig-mode 1)
#+END_SRC
*** Mouse+
#+BEGIN_SRC emacs-lisp
(use-package mouse+
  :ensure t
  :init
  (global-set-key [down-mouse-2] 'mouse-flash-position)
  )
#+END_SRC

** Work
#+BEGIN_SRC emacs-lisp
(when is-work
  (load "~/.emacs.d/work.el"))
#+END_SRC

** Terminal
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :ensure t
  :bind (("<f10>" . sane-term-create)))
#+END_SRC

*** Open terminal from emacs
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f12>") (kbd "M-& terminator"))
(add-to-list 'display-buffer-alist (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)

;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

*** Split windows and switch at the same time
From Daniel Mai https://github.com/danielmai/.emacs.d/blob/master/config.org
#+BEGIN_SRC emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC

*** Winner-mode!
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

*** Fullframe
#+BEGIN_SRC emacs-lisp
(use-package fullframe
  :init
  (fullframe magit-status magit-mode-quit-window)
  (fullframe projectile-vc magit-mode-quit-window)
  (fullframe magit-diff magit-quit-window)
  (fullframe magit-diff-unstaged magit-quit-window)
  (fullframe magit-diff magit-mode-quit-window))
#+END_SRC

*** Resizing windows
#+BEGIN_SRC emacs-lisp
(defhydra hydra-resize (global-map "<f2>")
  "resizing hydra"
  ("<left>" shrink-window-horizontally "shrink horizontal")
  ("<right>" enlarge-window-horizontally "enlarge horizontal")
  ("<down>" shrink-window "shrink")
  ("<up>" enlarge-window "shrink")
  )
#+END_SRC

** TEMP
#+BEGIN_SRC emacs-lisp
(defmacro my/with-advice (adlist &rest body)
  "Execute BODY with temporary advice in ADLIST.

Each element of ADLIST should be a list of the form
  (SYMBOL WHERE FUNCTION [PROPS])
suitable for passing to `advice-add'.  The BODY is wrapped in an
`unwind-protect' form, so the advice will be removed even in the
event of an error or nonlocal exit."
  (declare (debug ((&rest (&rest form)) body))
           (indent 1))
  `(progn
     ,@(mapcar (lambda (adform)
                 (cons 'advice-add adform))
               adlist)
     (unwind-protect (progn ,@body)
       ,@(mapcar (lambda (adform)
                   `(advice-remove ,(car adform) ,(nth 2 adform)))
                 adlist))))

(defun my/call-logging-hooks (command &optional verbose)
  "Call COMMAND, reporting every hook run in the process.
Interactively, prompt for a command to execute.

Return a list of the hooks run, in the order they were run.
Interactively, or with optional argument VERBOSE, also print a
message listing the hooks."
  (interactive "CCommand to log hooks: \np")
  (let* ((log     nil)
         (logger (lambda (&rest hooks)
                   (setq log (append log hooks nil)))))
    (my/with-advice
        ((#'run-hooks :before logger))
      (call-interactively command))
    (when verbose
      (message
       (if log "Hooks run during execution of %s:"
         "No hooks run during execution of %s.")
       command)
      (dolist (hook log)
        (message "> %s" hook)))
    log))

(define-key org-agenda-mode-map "x" 'my/org-agenda-reschedule-hour)

(defun my/org-agenda-reschedule-hour () (interactive) (org-agenda-date-later-hours 3))

(defun my/skip-if-after-5-or-weekend ()
  "Return t if it is after 5PM or is a weekend"
  (let ((current-hour (string-to-number (substring (current-time-string) 11 13))))
    (or (> current-hour 17) (member (substring (current-time-string) 0 3) '("Sat" "Sun")))))

(defun my/after-five-or-weekend ()
  "Return t if it is after 5PM or is a weekend"
  (and (or (> (string-to-number (substring (current-time-string) 11 13)) 17)
	   (member (substring (current-time-string) 0 3) '("Sat" "Sun")))
       (org-agenda-skip-entry-if 'my/after-five-or-weekend 'regexp ":WORK:")))


(use-package sx
  :config
  (require 'sx-load))

(use-package markdown-mode)
;; allow comment region in the code edit buffer (according to language)
(defun my-org-comment-dwim (&optional arg)
  (interactive "P")
  (or (org-babel-do-key-sequence-in-edit-buffer (kbd "M-;"))
      (comment-dwim arg)))

(define-key org-mode-map
  (kbd "M-;") 'my-org-comment-dwim)

#+END_SRC
