Emacs configuration
* Sections
#+TODO: REVIEW | DONE
:PROPERTIES:
:VISIBILITY: children
:END:

** Shortcuts to files
#+BEGIN_SRC emacs-lisp
;; Open this config file
(global-set-key (kbd "C-c s")
		(lambda () (interactive) (find-file "~/.emacs.d/settings.org")))

;; Open .bash_profile
(global-set-key (kbd "C-c b")
		(lambda () (interactive) (find-file "~/.bash_profile")))
#+END_SRC
** GUI stuff
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'tooltip-mode) (tooltip-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (add-hook 'window-setup-hook 'toggle-frame-maximized t))
#+END_SRC

** MELPA and other repositories
#+BEGIN_SRC emacs-lisp
;; Emacs lisp files
(add-to-list 'load-path "~/.emacs.d/elisp/")

(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

;; (add-to-list 'package-archives
;;              '("elpy" . "https://jorgenschaefer.github.io/packages/"))

(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

** Use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure t)
(setq use-package-verbose t)

(require 'use-package)
#+END_SRC
** Mac
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell)
;key bindings for mac
(when (eq system-type 'darwin) ;; mac specific settings
  (setq mac-option-modifier 'control)
  (setq mac-command-modifier 'meta)
  (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
  )

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC

** General defaults
#+BEGIN_SRC emacs-lisp
;; Send customizations to another file and load that file

(setq-default show-trailing-whitespace t)

;; Indentation
(setq-default indent-tabs-mode nil)

(setq initial-scratch-message nil)  ;; No scratch buffer message
(setq initial-major-mode 'gfm-mode)

(column-number-mode)

;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; nice scrolling
(setq scroll-margin 3
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

;; Remove text in active region if inserting text
(delete-selection-mode 1)

;; Type face size stuff
(set-face-attribute 'default nil :height 160)

;; Save backups elsewhere
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Enable show-paren-mode
(show-paren-mode 1)

;; Enable word-wrapping
(global-visual-line-mode t)

;; Highlight lines (with some themes this is distracting, disable if necessary)
(global-hl-line-mode t)

(setq set-mark-command-repeat-pop t)

(global-auto-revert-mode)
#+END_SRC

** Electric-pair
#+BEGIN_SRC emacs-lisp
(when (load "elec-pair" t t)
  (electric-pair-mode 1))

(defvar es/electic-pair-modes
  '(python-mode org-mode lisp-interaction-mode js2-mode emacs-lisp-mode yaml-mode))

(defun es/inhibit-electric-pair-mode (char)
  (not (member major-mode es/electic-pair-modes)))

(setq electric-pair-inhibit-predicate #'es/inhibit-electric-pair-mode)

;; (setq-default electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+END_SRC

** History and auto-save
#+BEGIN_SRC emacs-lisp
(setq savehist-file "/Users/alight/.emacs.d/savehist")
(savehist-mode 1)
;; t means no truncation
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

(setq auto-save-file-name-transforms '((".*" "/Users/alight/.emacs.d/auto-save-list/" t)))
#+END_SRC

** utf-8
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package apropospriate-theme
  :init
  :disabled t
  (load-theme 'apropospriate-dark t)
)

(use-package material-theme
  :init
  (load-theme 'material t)
)

(use-package oceanic-theme
  :init
  :disabled t
  (load-theme 'oceanic t)
)

(use-package afternoon-theme
  :init
  :disabled t
  (load-theme 'afternoon t)
  )

(use-package avk-emacs-themes
  :init
  :disabled t
  (load-theme 'avk-darkblue-white t)
  )

(use-package atom-one-dark-theme
  :disabled t
  :init
  (load-theme 'atom-one-dark t)
  )

(use-package aurora-theme
  :init
  :disabled t
  (load-theme 'aurora t)
  )

(use-package monokai-theme
  :init
  :disabled t
  (load-theme 'monokai t)
  )

(use-package dracula-theme
  :disabled t
  :init
  (load-theme 'dracula t)
  )

(use-package base16-theme
  :init
  :disabled t
  (load-theme 'base16-monokai-dark t)
  )

(use-package color-theme-sanityinc-tomorrow
  :init
  :disabled t
  (load-theme 'sanityinc-tomorrow-eighties)
  )

(defun es/enable-misterioso ()
  "Load misterioso theme, but fix annoying highlighting"
  (load-theme 'misterioso t)
  (set-face-attribute 'hl-line nil
              :inherit nil
              :background "gray13"))

;; (es/enable-misterioso)

;; THEME switching stuff from Daniel Mai
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "C-`" 'switch-theme)
#+END_SRC
** Fill-column-indicator
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :config
    :disabled t
    (add-hook 'python-mode-hook 'fci-mode)
    (setq-default fill-column 80)
    (setq-default fci-rule-color "#546D7A"))
#+END_SRC

** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Fixmee-mode
#+BEGIN_SRC emacs-lisp
(use-package fixmee
  :config
  (add-hook 'python-mode-hook 'fixmee-mode)
  (add-hook 'js2-mode-hook 'fixmee-mode)
  )
#+END_SRC

** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:init
(setq org-bullets-bullet-list
'("◉" "◎" "⚫" "○" "►" "◇"))
:config
(setcdr org-bullets-bullet-map nil)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer t
  )

(defhydra hydra-vc ()
  "vc hydra"
  ("n" git-gutter+-next-hunk  "next hunk")
  ("p" git-gutter+-previous-hunk "previous hunk")
  ("d" git-gutter+-show-hunk "show diff")
  ("r" git-gutter+-revert-hunk "revert hunk")
  ("b" magit-blame "blame")
  ("a" vc-annotate "annotate")
  ("t" git-timemachine "timemachine" :exit t)
  )

(global-set-key (kbd "<f8>") 'hydra-vc/body)

(use-package transpose-frame)

(defhydra hydra-transpose ()
  "transposing hydra"
  ("l" transpose-lines "lines")
  ("w" transpose-words "words")
  ("s" transpose-sexps "sexps")
  ("p" transpose-paragraphs "paragraphs")
  ("c" transpose-chars "characters")
  ("W" transpose-frame "windows")
  )

(global-set-key (kbd "C-t") 'hydra-transpose/body)

(defhydra hydra-modes ()
  "settings hydra"
  ("l" lisp-interaction-mode "lisp interaction" :exit t)
  ("p" python-mode "python" :exit t)
  ("o" org-mode "org" :exit t)
  ("s" sql-mysql "MySQL interaction" :exit t)
  ("x" sx-compose-mode "Stack Exhange compose" :exit t)
  ("m" gfm-mode "Markdown" :exit t)
  ("j" js2-mode "JavaScript" :exit t)
  ("w" web-mode "Web" :exit t)
  )

(global-set-key (kbd "s-M") 'hydra-modes/body)
#+END_SRC
** Org-mode
*** General settings
#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
(setq org-hide-leading-stars t)
(add-hook 'org-mode-hook 'org-indent-mode)

;; Open .org and .txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

(add-hook 'org-agenda-finalize-hook
      (lambda () (remove-text-properties
         (point-min) (point-max) '(mouse-face t))))
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cc" 'org-capture)
;; (global-set-key "\C-ca" 'org-agenda)

(define-key org-agenda-mode-map "d" 'org-agenda-deadline)
(define-key org-agenda-mode-map "s" 'org-agenda-schedule)


(defun configure-smerge ()
  "Configure smerge-mode"
  (interactive)
  (define-key smerge-mode-map (kbd "C-c m o") 'smerge-keep-other)
  (define-key smerge-mode-map (kbd "C-c m m") 'smerge-keep-mine)
  (define-key smerge-mode-map (kbd "C-c m n") 'smerge-next)
  )

(add-hook 'smerge-mode-hook 'configure-smerge)

;; Open this config file
(global-set-key (kbd "C-c s")
        (lambda () (interactive) (find-file "~/.emacs.d/settings.org")))

(global-set-key (kbd "C-c a")
        (lambda () (interactive) (find-file "~/org_files/alight.org")))

;; bindings for capture templates
(define-key global-map "\C-ci" ;inbox
  (lambda () (interactive) (org-capture nil "i")))
(define-key global-map "\C-cnn" ;new note
  (lambda () (interactive) (org-capture nil "n")))

;; allow comment region in the code edit buffer (according to language)
(defun my-org-comment-dwim (&optional arg)
  (interactive "P")
  (or (org-babel-do-key-sequence-in-edit-buffer (kbd "M-;"))
      (comment-dwim arg)))

(define-key org-mode-map
  (kbd "M-;") 'my-org-comment-dwim)
#+END_SRC

*** TODOs
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)

;; Set to 'invisible and blocked tasks wont show up in agenda, t and they will be dimmed
(setq org-agenda-dim-blocked-tasks 'invisible)

;; Don't keep track of completed repeating tasks
(setq org-log-repeat nil)
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
;; Enable highlight line only for org-agenda-mode (it is annoying in other modes)
(add-hook 'org-agenda-mode-hook 'hl-line-mode)

;; Make agenda full screen without typing 'o'
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))

(defun es/skip-unless-work ()
  "Skip trees that are not waiting"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (re-search-forward ":work:" subtree-end t)
    nil ; tag found, do not skip
      subtree-end))) ; tag not found, continue after end of subtree

;; Block agenda view for agenda and unscheduled tasks
(setq org-agenda-custom-commands
      '(("j" "Agenda and unscheduled tasks"
     ((tags-todo
       "-DEADLINE={.+}-SCHEDULED={.+}-notes-someday-emacs-work-projects-learn-questions")
      (agenda "")
      )
     ((org-agenda-start-on-weekday nil)
      (org-agenda-ndays 2)
      (org-agenda-prefix-format "○  %t")
      (org-show-context-detail 'minimal)
      (org-agenda-remove-tags t)
      (org-agenda-todo-keyword-format "")
      (org-deadline-warning-days 0)))
    ("w" "Work tasks"
     ((tags-todo
       "-DEADLINE={.+}-SCHEDULED={.+}-dad-mom-beilei-someday-emacs-projects")
      (agenda "" nil))
     ((org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp ":home:"))
      (org-agenda-start-on-weekday nil)
      (org-agenda-ndays 1)
      (org-deadline-warning-days 0)))
    ))

  (setq org-agenda-files '("~/org_files/alight.org"))

  ;; Only ask for confirmation of kills within agenda
  ;; only if TODO spans more than 2 lines
  (setq org-agenda-confirm-kill 2)

  (setq org-deadline-warning-days 3)
#+END_SRC

*** Capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    '(("i" "New TODO to Inbox" entry (file+headline
      "~/org_files/alight.org" "Inbox")
      "* TODO %?" :kill-buffer t)))

    ;; ("n" "New note to xnotes.org" entry (file
    ;;  "~/Dropbox/org_files/xnotes.org")
    ;;  "* %T\n\n%i%?" :prepend t :empty-lines 1)

    ;; ("w" "New work note" entry (file
    ;;   "~/Dropbox/org_files/worknotes.org")
    ;;   "* %T\n\n%i%?" :kill-buffer t :prepend t :empty-lines 1)

    ;; ("d" "New daydayup entry" entry (file
    ;;   "~/Dropbox/org_files/daydayup.org")
    ;;   "* %T\n\n%?" :kill-buffer t :prepend t :empty-lines 1)))
#+END_SRC

*** make things look nice
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
#+END_SRC

*** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (sh . t)))
#+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :defer t
    :commands deft-new-file-named
    :config
    (setq deft-directory "~/org_files")
    (setq deft-default-extension "org")
    (setq deft-text-mode 'org-mode)
    (setq deft-extensions '("txt" "org" "taskpaper" "md"))
    (setq deft-use-filename-as-title t)
    (setq deft-recursive t)
    (setq deft-use-filter-string-for-filename t)
    :bind (("C-c d" . deft)))
  ;;(setq deft-auto-save-interval 0)

;;advise deft-new-file-named to replace spaces in file names with _
(defun bjm-deft-strip-spaces (args)
  "Replace spaces with - in the string contained in the first element of the list args. Used to advise deft's file naming function."
  (list (replace-regexp-in-string " " "_" (car args)))
  )
(advice-add 'deft-new-file-named :filter-args #'bjm-deft-strip-spaces)

(defun es/make-scratches-in-deft ()
  "save a new file to deft with a unique name based on current time
The file will be uniquely named with xscratch + yeardatehourminutesecond"
  (interactive)
    (deft-new-file-named (concat "xscratch" (format-time-string "%Y%b%d%H%M%S"))))

(global-set-key (kbd "<f9>") 'es/make-scratches-in-deft)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer t
  :diminish projectile-mode
  :config
  (progn
    ;; (setq projectile-enable-caching t)
    (add-to-list 'projectile-globally-ignored-directories "javascript/builds")
    (add-to-list 'projectile-globally-ignored-directories "alightorm/alembic/versions")
    (setq projectile-indexing-method 'alien)
    (setq projectile-completion-system 'default)
    (setq projectile-switch-project-action 'helm-projectile)
    (projectile-global-mode)))

;; (require 'dash) ;This seems to be necessary after recent package updates...
(use-package helm-projectile
  :defer t
  :commands helm-projectile-find-file
  :init
  (setq projectile-keymap-prefix (kbd "C-c p"))
  (helm-projectile-on))
#+END_SRC

** Custom functions for navigation
#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)

(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    ;;(require 'helm-config)
    (helm-mode 1)
    (setq helm-recentf-fuzzy-match t
      helm-buffers-fuzzy-matching t
      helm-completion-in-region-fuzzy-match t
      helm-mode-fuzzy-match t
      helm-recentf-fuzzy-match t
      helm-M-x-fuzzy-match t)
    (add-to-list 'helm-completing-read-handlers-alist '(find-file . helm-completing-read-symbols))
    ;; (setq helm-source-recentf
    ;;   (helm-make-source "Recentf" 'helm-recentf-source
    ;;     :fuzzy-match t))
    :bind (("C-x b" . helm-mini)
           ("C-x f" . helm-recentf)
       ("C-s" . helm-occur)
       ("M-x" .  helm-M-x)
           ("M-y" . helm-show-kill-ring)))

(define-key helm-map
  (kbd "<down-mouse-2>") 'mouse-yank-primary)

(define-key helm-map
  (kbd "<drag-mouse-2>") 'ignore)

(defun es/helm-mini-or-projectile-find-file ()
  (interactive)
  (if (helm-alive-p)
      (helm-run-after-exit #'helm-projectile-find-file)
    (helm-mini)))
#+END_SRC

** Helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :defer t
  :config
  (setq helm-ag-insert-at-point 'symbol)
  )
#+END_SRC

** Ace-jump-mode
#+BEGIN_SRC emacs-lisp
;;
;; ace jump mode major function
;;
(add-to-list 'load-path "~/.emacs.d/elisp/ace-jump-mode/")
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)

;; you can select the key you prefer to
(global-set-key (kbd "M-s") 'ace-jump-mode)

;;
;; enable a more powerful jump back function from ace jump mode
;;
(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(setq ace-jump-mode-submode-list '(ace-jump-char-mode ace-jump-line-mode ace-jump-word-mode))
#+END_SRC

** Smartscan
#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :init
  (global-smartscan-mode 1)
  )
#+END_SRC
** Registers and bookmarks
#+BEGIN_SRC emacs-lisp
(defhydra hydra-register (global-map "<f1>")
  "register hydra"
  ("r" point-to-register "point")
  ("j" jump-to-register "jump")
  ("t" copy-to-register "copy text")
  ("i" insert-register "insert text")
  ("a" append-to-register "append text")
  ("p" prepend-to-register "prepend text")
  )

(defun my/quick-save-bookmark ()
  "Save bookmark with name as 'buffer:row:col'"
  (interactive)
  (bookmark-set (format "%s:%s:line %s:column %s"
			(thing-at-point 'symbol)
			(buffer-name)
			(line-number-at-pos)
			(current-column)))
  (message "Bookmarked saved at current position"))

(global-set-key (kbd "C-S-b") 'my/quick-save-bookmark)
;(bind-key "<menu>" 'helm-bookmarks)
#+END_SRC

** Assorted key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o") 'browse-url-of-file)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-\-") 'text-scale-decrease)
(global-set-key "\C-xp" 'pop-to-mark-command)
(global-set-key (kbd "s-n") 'make-frame)
(define-key dired-mode-map "b" 'dired-up-directory)
;; Don't suspended when I accidently hit C-z
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "M-c"))
(global-unset-key (kbd "M-l"))
#+END_SRC

** Key-chord
#+BEGIN_SRC emacs-lisp
(defun es/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(use-package key-chord
  :init
  (progn
    (key-chord-mode 1)
    (key-chord-define-global ";f" 'flip-frame)
    (key-chord-define-global ";t" 'elpy-test-pytest-runner)
    (key-chord-define-global "jj" 'helm-projectile-find-file)
    (key-chord-define-global "pp" 'helm-projectile-switch-project)
    (key-chord-define-global "JJ" 'helm-projectile-find-file-in-known-projects)
    (key-chord-define-global "BB" 'my/switch-to-previous-buffer)
    (key-chord-define-global "\\\\" 'helm-mini)
    (key-chord-define-global "MM" 'hydra-modes/body)
    (key-chord-define-global "FF" 'delete-other-windows)
    (key-chord-define-global "GG" 'magit-status)
    (key-chord-define-global "SS" 'helm-swoop-back-to-last-point)
    (key-chord-define-global "DD" 'dired-jump)
    (key-chord-define-global "``" 'helm-bookmarks)
    (key-chord-define-global "HH" 'highlight-symbol)

    )
  )
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode)
(defun comment-or-uncomment-line-or-region ()
  "Comments or uncomments the current line or region."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (if (save-excursion (beginning-of-line) (looking-at "[[:space:]]*$"))
    (comment-dwim nil)
      (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))

(global-set-key (kbd "M-;") 'comment-or-uncomment-line-or-region)

#+END_SRC

** Which-function-mode
#+BEGIN_SRC emacs-lisp

(which-function-mode)
(add-to-list 'which-func-modes 'python-mode)

;; Show the current function name in the header line
(setq-default header-line-format
              '((which-func-mode ("" which-func-format " "))))
(setq mode-line-misc-info
            ;; We remove Which Function Mode from the mode line, because it's mostly
            ;; invisible here anyway.
            (assq-delete-all 'which-func-mode mode-line-misc-info))

#+END_SRC
** RealGUD
#+BEGIN_SRC emacs-lisp
(use-package realgud)
#+END_SRC
** Yaml-mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :config
  (add-hook 'yaml-mode-hook
        (lambda ()
          (local-set-key (kbd "C-c C-s") 'elpy-rgrep-symbol)))
  (add-to-list 'auto-mode-alist '("\\.kv\\'" . yaml-mode))
  )
#+END_SRC
*
** Lisp
*** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package "eldoc"
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :defer t
  :init
  (progn
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)))
#+END_SRC

** SQL
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (global-company-mode 1)
  (setq company-idle-delay 0)
  (setq company-tooltip-limit 15)
  (setq company-minimum-prefix-length 2)
  ;; (setq company-tooltip-flip-when-above t)
  ;; (setq company-dabbrev-ignore-case 'keep-prefix)
  (setq company-dabbrev-downcase nil)
  )
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode)
  (setq flycheck-checker-error-threshold 1000)
  )
(add-hook 'python-mode-hook
          (lambda ()
            (setq flycheck-python-pylint-executable "/usr/local/bin/pylint")
            (setq flycheck-pylintrc "/Users/alight/.pylintrc")))
#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
(defun replace-alist-mode (alist oldmode newmode)
  (dolist (aitem alist)
    (if (eq (cdr aitem) oldmode)
    (setcdr aitem newmode))))

;; not sure what mode you want here. You could default to 'fundamental-mode
(replace-alist-mode auto-mode-alist 'javascript-mode 'js2-mode)


(use-package js2-mode :ensure t :defer t
  :mode (("\\.js\\'" . js2-mode)
         ("\\.json\\'" . javascript-mode))
  :commands js2-mode
  :init (progn
          (setq-default js2-basic-offset 4
                        js2-indent-switch-body t
                        js2-auto-indent-p t
                        js2-global-externs '("angular")
                        js2-indent-on-enter-key t
                        flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint))

                        )
          )
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
  (add-to-list 'js2-mode-hook 'flycheck-mode))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :init (yas-global-mode 1)
  :config
  (progn
    (yas-global-mode)
    (add-hook 'term-mode-hook (lambda()
				(setq yas-dont-activate t)))
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    ;; (define-key yas-minor-mode-map (kbd "<tab>") nil)
    ;; (define-key yas-minor-mode-map (kbd "TAB") nil)
    ;; (define-key yas-minor-mode-map (kbd "SPC") #'yas-expand)
    (yas-global-mode 1)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (setq magit-push-current-set-remote-if-missing nil)
    :config
    (setq magit-push-always-verify nil)
    :bind ("C-c g" . magit-status))
#+END_SRC

** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter+
  :init
  (global-git-gutter+-mode)
  :config
  (use-package git-gutter-fringe+)
  :diminish (git-gutter+-mode . "gg")
  )
#+END_SRC

** Git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :defer t
  )
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :defer t
    :config
    (setq shift-select-mode nil)
    :bind ("M-SPC" . er/expand-region))

#+END_SRC

** Syntax-subword

This mode allows more fine-grained movement and editing commands

#+BEGIN_SRC emacs-lisp
(use-package syntax-subword
  :init
  (setq syntax-subword-skip-spaces t)
  :config
  (global-syntax-subword-mode))
#+END_SRC

** Wrap-region
#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :config
  (wrap-region-add-wrappers
   '(("(" ")" nil (python-mode org-mode lisp-mode))
     ("'" "'" nil python-mode)
     ("`" "`" nil (org-mode sql-mode sql-interactive-mode gfm-mode))
     ("\"" "\"" nil (org-mode python-mode lisp-mode sql-mode))))
  (add-hook 'org-mode-hook 'wrap-region-mode)
  (add-hook 'python-mode-hook 'wrap-region-mode)
(add-hook 'gfm-mode-hook 'wrap-region-mode)
  (add-hook 'lisp-mode-hook 'wrap-region-mode))
#+END_SRC

** Multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("M-N" . mc/mark-next-like-this)
	 ("M-P". mc/mark-previous-like-this)
     ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Fly spell
#+BEGIN_SRC emacs-lisp
  ;; Enable flyspell-mode
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook  'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

** Flymake
#+BEGIN_SRC emacs-lisp
(use-package flymake-python-pyflakes
  :init
  :disabled t
  (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)
  (setq flymake-python-pyflakes-executable "/usr/local/bin/pylint")
  (setq flymake-python-pyflakes-extra-arguments '("--max-line-length=79"))
)
#+END_SRC

** Auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (require 'auto-complete-config)
    (add-to-list 'ac-dictionary-directories "~/.emacs.d/es-ac-dict")
    (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
    (add-to-list 'ac-modes 'sql-interactive-mode)
    (add-hook 'sql-interactive-mode-hook (lambda () (auto-complete-mode 1) (company-mode)))
)
#+END_SRC

** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
  :bind ("C-/" . undo-tree-undo)
  )
#+END_SRC

** Copy line
#+BEGIN_SRC emacs-lisp
 (defun copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring.
    Ease of use features:
    - Move to start of next line.
    - Appends the copy on sequential calls.
    - Use newline as last char even on the last line of the buffer.
    - If region is active, copy its lines."
  (interactive "p")
  (let ((beg (line-beginning-position))
	(end (line-end-position arg)))
    (when mark-active
      (if (> (point) (mark))
	  (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
	(setq end (save-excursion (goto-char (mark)) (line-end-position)))))
    (if (eq last-command 'copy-line)
	(kill-append (buffer-substring beg end) (< end beg))
      (kill-ring-save beg end)))
  (kill-append "\n" nil)
  (beginning-of-line (or (and arg (1+ arg)) 2))
  (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

(global-set-key (kbd "C-S-l") 'copy-line)

#+END_SRC

** Editor-config
#+BEGIN_SRC emacs-lisp
(load "editorconfig")
(editorconfig-mode 1)
#+END_SRC
*** Mouse+
#+BEGIN_SRC emacs-lisp
(use-package mouse+
  :ensure t
  :init
  (global-set-key [down-mouse-2] 'mouse-flash-position)
  )
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)

;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

*** Split windows and switch at the same time
From Daniel Mai https://github.com/danielmai/.emacs.d/blob/master/config.org
#+BEGIN_SRC emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC

*** Resizing windows
#+BEGIN_SRC emacs-lisp
(defhydra hydra-resize (global-map "<f2>")
  "resizing hydra"
  ("<left>" shrink-window-horizontally "shrink horizontal")
  ("<right>" enlarge-window-horizontally "enlarge horizontal")
  ("<down>" shrink-window "shrink")
  ("<up>" enlarge-window "shrink")
  )
#+END_SRC

** Winner-mode!
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Fullframe
#+BEGIN_SRC emacs-lisp
(use-package fullframe
  :init
  (fullframe magit-status magit-mode-quit-window)
  (fullframe projectile-vc magit-mode-quit-window)
  (fullframe magit-diff magit-quit-window)
  (fullframe magit-diff-unstaged magit-quit-window)
  (fullframe magit-diff magit-mode-quit-window))
#+END_SRC

** Markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :defer t
)
#+END_SRC

** Assorted custom functions
#+BEGIN_SRC emacs-lisp
(defmacro my/with-advice (adlist &rest body)
  "Execute BODY with temporary advice in ADLIST.

Each element of ADLIST should be a list of the form
  (SYMBOL WHERE FUNCTION [PROPS])
suitable for passing to `advice-add'.  The BODY is wrapped in an
`unwind-protect' form, so the advice will be removed even in the
event of an error or nonlocal exit."
  (declare (debug ((&rest (&rest form)) body))
           (indent 1))
  `(progn
     ,@(mapcar (lambda (adform)
                 (cons 'advice-add adform))
               adlist)
     (unwind-protect (progn ,@body)
       ,@(mapcar (lambda (adform)
                   `(advice-remove ,(car adform) ,(nth 2 adform)))
                 adlist))))

(defun my/call-logging-hooks (command &optional verbose)
  "Call COMMAND, reporting every hook run in the process.
Interactively, prompt for a command to execute.

Return a list of the hooks run, in the order they were run.
Interactively, or with optional argument VERBOSE, also print a
message listing the hooks."
  (interactive "CCommand to log hooks: \np")
  (let* ((log     nil)
         (logger (lambda (&rest hooks)
                   (setq log (append log hooks nil)))))
    (my/with-advice
        ((#'run-hooks :before logger))
      (call-interactively command))
    (when verbose
      (message
       (if log "Hooks run during execution of %s:"
         "No hooks run during execution of %s.")
       command)
      (dolist (hook log)
        (message "> %s" hook)))
    log))
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
  :init
  ;; (add-hook 'web-mode-hook
  ;;       (lambda ()
  ;;         (local-set-key (kbd "M-SPC") 'web-mode-mark-and-expand)))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (setq web-mode-engines-alist
    '(("django"    . "\\.html\\'"))
    )
  )
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
;;narrow dired to match filter
(use-package dired-narrow
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))


;;preview files in dired
(use-package peep-dired
  :ensure t
  :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
  :bind (:map dired-mode-map
              ("P" . peep-dired)))

(setq dired-omit-files
      (rx (or (seq bol (? ".") "#")         ;; emacs autosave files
              (seq "~" eol)                 ;; backup-files
              (seq ".pyc" eol)
              )))

(add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))
(setq dired-listing-switches "-aBhlt")
#+END_SRC

** nginx-mode
#+BEGIN_SRC emacs-lisp
(use-package nginx-mode
  :defer t
  )
#+END_SRC

** define-word
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :bind
  ("C-x d" . define-word-at-point)
  )
#+END_SRC

** Anaconda-mode
#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :init
  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
)
(use-package company-anaconda
  :init
  (eval-after-load "company"
    '(add-to-list 'company-backends 'company-anaconda))
)
#+END_SRC

** Skewer
#+BEGIN_SRC emacs-lisp
(use-package skewer-mode
  :init
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
)
#+END_SRC

** gitignore-mode
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode)
#+END_SRC

** Dockerfile-mode
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode)
#+END_SRC

** Json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
:init
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
 )
#+END_SRC

** highlight-symbol
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :ensure t
  )
#+END_SRC

** File path helpers
#+BEGIN_SRC emacs-lisp
(defun copy-file-path-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

(defun copy-file-dotpath-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new (replace-regexp-in-string "/" "."
                                          (replace-regexp-in-string "/Users/alight/development/gaia/" ""
                                                                    (replace-regexp-in-string "\.py" "" filename))))
      (message "Dotpath to file '%s' copied to clipboard." filename))))

#+END_SRC
** TEMP
#+BEGIN_SRC emacs-lisp
(defun my-org-deadline (arg &optional time repeat)
(interactive "P")
  (let ((org-time-stamp-formats
          (if repeat
            `(,(concat "<%Y-%m-%d %a " repeat ">") .
              ,(concat "<%Y-%m-%d %a %H:%M " repeat ">"))
             org-time-stamp-formats)))
    (org-deadline arg time)))

(defun org-agenda-repeating-p ()
  (let ((pos (get-text-property 0 'org-marker (thing-at-point 'line))))
    (save-window-excursion
      (org-goto-marker-or-bmk pos)
      (org-get-repeat))
    ))


(defun query-if-repeating (&rest args)
  (if (not (org-agenda-repeating-p))
      t
    (y-or-n-p "Entry repeats.  Kill?"))
  )

(advice-add 'org-agenda-kill :before-while 'query-if-repeating)

(define-key org-agenda-mode-map
  [remap org-agenda-next-line] 'org-agenda-next-item)
(define-key org-agenda-mode-map
  [remap org-agenda-previous-line] 'org-agenda-previous-item)

(dir-locals-set-class-variables
 'xpython
 '((nil . ((buffer-read-only . t)
           ))))

;; Any directory set in this way will have files open in read-only mode by default
(dir-locals-set-directory-class "/Users/alight/.envs/" 'xpython)
#+END_SRC
