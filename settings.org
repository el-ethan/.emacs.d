Emacs configuration

* Load path
#+BEGIN_SRC emacs-lisp

;; Emacs lisp files
(add-to-list 'load-path "~/.emacs.d/elisp/")

#+END_SRC
* General

#+BEGIN_SRC emacs-lisp
  
  
  ;; Save a list of recent files visited. (open recent file with C-x f)
  (global-set-key (kbd "C-x f") 'recentf-ido-find-file)
  (recentf-mode 1)
  (setq recentf-max-saved-items 100) ;; just 20 is too recent
  
  ;; No scratch buffer message
  (setq initial-scratch-message nil)
  
  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)
  
  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)
  
  ;; Send customizations to another file and load that file
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
  
  ;; Highlight current line
  ;;(global-hl-line-mode 1)
  
  ;; Set typeface to 18.0
  (set-face-attribute 'default nil :height 180)
  
  ;; Turn column number on by default
  (setq column-number-mode t)
  
  ;; Save backups elsewhere
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  
  ;; Enable show-paren-mode
  (show-paren-mode 1)
  
  ;; Make things look nice when in windowed emacs
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (set-frame-size (selected-frame) 85 90))
  
  ;; Enable word-wrapping
  (global-visual-line-mode t)
  
#+END_SRC
  
* History
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* Indentation

#+BEGIN_SRC emacs-lisp
  
  ;; Set tabs to four spaces
  ;; (setq-default indent-tabs-mode nil)
  ;; (setq-default tab-width 4)
  ;; (setq indent-line-function 'insert-tab)
  
  (add-hook 'python-mode-hook
        (lambda ()
          (setq-default indent-tabs-mode nil)
          (setq-default tab-width 4)
          (setq-default python-indent 4)))
#+END_SRC

* Org
** General settings

#+BEGIN_SRC emacs-lisp

(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

;; Open .org and .txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

;; This makes it so I can have check boxes auto-uncheck when 
;; repeating task is completed              

(require 'org-checklist)

#+END_SRC

** TODOs

#+BEGIN_SRC emacs-lisp
  
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  
  ;; Set to 'invisible' and blocked tasks wont show up in agenda
  (setq org-agenda-dim-blocked-tasks t)
  
  
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  
  ;; Enable highlight line only for org-agenda-mode (it is annoying in other modes)
  
  (add-hook 'org-agenda-mode-hook 'hl-line-mode)
  
  ;; Block agenda view for agenda and unscheduled tasks
  (setq org-agenda-custom-commands 
    '(("1" "Agenda and unscheduled tasks"
       ((tags "-DEADLINE={.+}/+TODO")
        (agenda "")))
      ("2" "Mobile tasks"
       ((tags "-DEADLINE={.+}/+TODO")
        (agenda ""))
        ((org-agenda-prefix-format "- ")
         (org-agenda-todo-keyword-format "")
         (org-agenda-start-on-weekday nil)
         (org-agenda-ndays 3)
         (org-deadline-warning-days 0))
         ("~/Dropbox/org_files/taskpaper_files/da_guai.taskpaper"))))
         
  (setq org-agenda-files '("~/Dropbox/org_files/da_guai.org")) 
  
  ;; Only ask for confirmation of kills within agenda 
  ;; only if TODO spans more than 2 lines         
  (setq org-agenda-confirm-kill 2)
  
  (setq org-deadline-warning-days 3)
  
#+END_SRC
** Capture templates

#+BEGIN_SRC emacs-lisp
  
  (setq org-capture-templates
    '(("i" "New TODO to Inbox" entry (file+headline 
      "~/Dropbox/org_files/da_guai.org" "Inbox")
      "* TODO %?" :kill-buffer t)
  
    ("n" "New note to Inbox" entry (file+headline 
     "~/Dropbox/org_files/da_guai.org" "Inbox")
     "* %?" :kill-buffer t)
  
    ("j" "New journal entry" entry (file+headline 
      "~/Dropbox/org_files/riji.org" "日记")
      "* %T\n\n%?" :kill-buffer t :prepend t :empty-lines 1)
  
    ("d" "New daydayup entry" entry (file 
      "~/Dropbox/org_files/daydayup.org")
      "* %T\n\n%?" :kill-buffer t :prepend t :empty-lines 1)))
  
#+END_SRC

** Sync

The code below runs a python script that parses the tasks in my org files
and saves them in .taskpaper format to a file that can be accessed on my 
phone.

#+BEGIN_SRC emacs-lisp

(defun sync-to-taskpaper ()
  "Sync org file to taskpaper file for mobile access"
  (when (file-equal-p buffer-file-name "/home/ethan/Dropbox/org_files/da_guai.org")
    (shell-command "python3 ~/Dropbox/development/orgy/orgy.py")))

(add-hook 'after-save-hook #'sync-to-taskpaper)

#+END_SRC

** Org-crypt

#+BEGIN_SRC emacs-lisp

(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
(setq org-crypt-key "ED55AE6D")

;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.

;; Auto-saving does not cooperate with org-crypt.el: so you need
;; to turn it off if you plan to use org-crypt.el quite often.
;; Otherwise, you’ll get an (annoying) message each time you
;; start Org.
;; To turn it off only locally, you can insert this:
;;
;; # -*- buffer-auto-save-file-name: nil; -*-


#+END_SRC

* Deft

#+BEGIN_SRC emacs-lisp

(setq deft-directory "~/Dropbox/gnotes")
(setq deft-extension "txt")
(setq deft-text-mode 'org-mode)
(setq deft-use-filename-as-title t)
(setq deft-auto-save-interval 0)

(global-set-key (kbd "C-c d") 'deft)

#+END_SRC

* Ido

#+BEGIN_SRC emacs-lisp

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;; Don't ask for confirmation when entering name of non-existent buffer 
(setq ido-create-new-buffer 'always)

;; The order in which files will appear when using ido
(setq ido-file-extensions-order '(".org" ".txt" ".py" ".emacs" ".el"))

#+END_SRC

* MELPA

#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.org/packages/") t)
(when (< emacs-major-version 24)
   ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)

#+END_SRC

* Fly Spell

#+BEGIN_SRC emacs-lisp
  
  ;; Enable flyspell-mode
  
  (dolist (hook '(org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1)))) 
  
  ;; Enable flyspell for Python code comments, but not Python code
  (add-hook 'python-mode-hook
            (lambda ()
              (flyspell-prog-mode)))
#+END_SRC

* Key bindings
  
#+BEGIN_SRC emacs-lisp

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; Open this config file
(global-set-key (kbd "C-c s") 
  (lambda () (interactive) (find-file "~/.emacs.d/settings.org")))

;; bindings for capture templates

(define-key global-map "\C-ci" ;inbox
  (lambda () (interactive) (org-capture nil "i")))
(define-key global-map "\C-cnn" ;new note
  (lambda () (interactive) (org-capture nil "n")))

(global-set-key "\C-xp" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)

(global-set-key "\C-xgs" 'magit-status)

#+END_SRC

* Auto-complete

#+BEGIN_SRC emacs-lisp

(require 'auto-complete)
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(global-auto-complete-mode t)

#+END_SRC

* Fill-column-indicator
#+BEGIN_SRC emacs-lisp

(require 'fill-column-indicator)
(define-globalized-minor-mode
  global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode t)
(setq-default fill-column 80)

#+END_SRC
* Python

#+BEGIN_SRC emacs-lisp
  
(setq python-shell-interpreter "python3")
  
#+END_SRC
