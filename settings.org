Emacs configuration
* Sections
  :PROPERTIES:
  :VISIBILITY: all
  :END:

** Basics
*** GUI stuff
#+BEGIN_SRC emacs-lisp 
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'tooltip-mode) (tooltip-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (add-hook 'window-setup-hook 'toggle-frame-maximized t))
#+END_SRC
   
*** MELPA and other repositories
#+BEGIN_SRC emacs-lisp
;; Emacs lisp files
(add-to-list 'load-path "~/.emacs.d/elisp/")

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/") t)

(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

*** Use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(setq use-package-verbose t)

(require 'use-package)
#+END_SRC

*** General defaults
#+BEGIN_SRC emacs-lisp
;; Send customizations to another file and load that file
(setq initial-scratch-message nil)  ;; No scratch buffer message
(setq initial-major-mode 'org-mode)

;; Don't suspended when I accidently hit C-z
(global-unset-key (kbd "C-z"))

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Remove text in active region if inserting text
(delete-selection-mode 1)

;; Type face size stuff
(set-face-attribute 'default nil :height 150)

(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-\-") 'text-scale-decrease)

;; Turn column number on by default
(setq column-number-mode t)

;; Save backups elsewhere
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Show battery percentage and remaining time
(display-battery-mode)
(setq battery-mode-line-format "[%b%p%% %t]")

;; Enable show-paren-mode
(show-paren-mode 1)

;; Enable word-wrapping
(global-visual-line-mode t)

;; Highlight lines (with some themes this is distracting, disable if necessary) 
(global-hl-line-mode t)

(global-set-key "\C-xp" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)

(when (load "elec-pair" t t)
  (electric-pair-mode 1))
#+END_SRC

*** History and auto-save
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
;; t means no truncation
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** Scratch files
#+BEGIN_SRC emacs-lisp
(defun make-scratch-buffer ()
  "makes a new scratch buffer, uniquely named"
  (interactive)
  (switch-to-buffer "_scratch")
  (rename-uniquely)
  (funcall (and initial-major-mode)))

(global-set-key (kbd "<f9>") 'make-scratch-buffer)
#+END_SRC

** Visuals
*** Fill-column-indicator
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (define-globalized-minor-mode
      global-fci-mode fci-mode (lambda () (fci-mode 1)))
    (global-fci-mode t)
    (setq-default fill-column 80)
    (setq-default fci-rule-color "#546D7A"))
#+END_SRC

*** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Keybindings
*** Assorted key bindings
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-c o") 'browse-url-of-file)
#+END_SRC

*** Key-chord
#+BEGIN_SRC emacs-lisp 
(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(use-package key-chord
  :ensure t
  :init
  (progn
    (key-chord-mode 1)
    ;;(key-chord-define-global "BB" 'helm-mini)
    ;;(key-chord-define-global "bb" 'my/switch-to-previous-buffer)
    )
  )
#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp 
(use-package hydra
  :ensure t
  :defer t
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hydras!

(defhydra hydra-gg (global-map "<f8>")
  "git-gutter hydra"
  ("n" diff-hl-next-hunk  "next hunk")
  ("p" diff-hl-previous-hunk "previous hunk")
  ("d" diff-hl-diff-goto-hunk "show diff")
  ("r" diff-hl-revert-hunk "revert hunk")
  )

(use-package transpose-frame
  :ensure t)

(defhydra hydra-transpose (global-map "C-x t")
  "transposing hydra"
  ("l" transpose-lines "lines")
  ("w" transpose-words "words")
  ("s" transpose-sexps "sexps")
  ("p" transpose-paragraphs "paragraphs")
  ("c" transpose-chars "characters")
  ("f" transpose-frame "frames")
  )
#+END_SRC

** Org
*** General settings
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

;; Open .org and .txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

;; This makes it so I can have check boxes auto-uncheck when 
;; repeating task is completed              
(require 'org-checklist)
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp 
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(define-key org-agenda-mode-map "d" 'org-agenda-deadline)

;; Open this config file
(global-set-key (kbd "C-c s") 
		(lambda () (interactive) (find-file "~/.emacs.d/settings.org")))

;; bindings for capture templates
(define-key global-map "\C-ci" ;inbox
  (lambda () (interactive) (org-capture nil "i")))
(define-key global-map "\C-cnn" ;new note
  (lambda () (interactive) (org-capture nil "n")))
#+END_SRC

*** TODOs
#+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t)
  ;; (setq org-enforce-todo-checkbox-dependencies t)

  ;; Set to 'invisible and blocked tasks wont show up in agenda, t and they will be dimmed 
  (setq org-agenda-dim-blocked-tasks 'invisible)

  ;; Don't keep track of completed repeating tasks
  (setq org-log-repeat nil)
#+END_SRC
   
*** Agenda
#+BEGIN_SRC emacs-lisp
;; Enable highlight line only for org-agenda-mode (it is annoying in other modes)
(add-hook 'org-agenda-mode-hook 'hl-line-mode)

;; Make agenda full screen without typing 'o'
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))

(defun my-skip-unless-work ()
  "Skip trees that are not waiting"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (re-search-forward ":work:" subtree-end t)
	nil ; tag found, do not skip
      subtree-end))) ; tag not found, continue after end of subtree

;; Block agenda view for agenda and unscheduled tasks
(setq org-agenda-custom-commands 
      '(("j" "Agenda and unscheduled tasks"
	 ((tags-todo 
	   "-DEADLINE={.+}-SCHEDULED={.+}-dad-mom-beilei-someday-emacs-projects-work")
	  (agenda ""))
	 ((org-agenda-start-on-weekday nil)
	  (org-deadline-warning-days 0)))
	("w" "Work tasks"
	 ((tags-todo 
	   "-DEADLINE={.+}-SCHEDULED={.+}-dad-mom-beilei-someday-emacs-projects")
	  (agenda ""))
	 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp ":home:"))
	  (org-agenda-start-on-weekday nil)
	  (org-agenda-ndays 1)
	  (org-deadline-warning-days 0)))
	("f" "Talking points"
         ((tags-todo "+beilei")
          (tags-todo "+mom")
          (tags-todo "+dad"))
	 ((org-agenda-prefix-format "- ")
	  (org-show-context-detail 'minimal)
	  (org-agenda-todo-keyword-format "")))
	(";" "Someday"
	 ((tags-todo "+someday"))
	 ((org-agenda-prefix-format "- ")
	  (org-show-context-detail 'minimal)
	  (org-agenda-remove-tags t)
	  (org-agenda-todo-keyword-format "")))
	("l" "Emacs"
	 ((tags-todo "+emacs"))
	 ((org-agenda-prefix-format "- ")
	  (org-show-context-detail 'minimal)
	  (org-agenda-remove-tags t)
	  (org-agenda-todo-keyword-format "")))
	("2" "Mobile tasks"
	 ((tags "-DEADLINE={.+}-SCHEDULED={.+}/+TODO")
	  (agenda ""))
	 ((org-agenda-prefix-format "- ")
	  (org-agenda-todo-keyword-format "")
	  (org-agenda-start-on-weekday nil)
	  (org-agenda-ndays 3)
	  (org-deadline-warning-days 0))
         ("~/Dropbox/org_files/taskpaper_files/da_guai.taskpaper"))))
         
  (setq org-agenda-files '("~/Dropbox/org_files/da_guai.org" 
                           "~/Dropbox/org_files/talkingpoints.org")) 

  ;; Only ask for confirmation of kills within agenda 
  ;; only if TODO spans more than 2 lines         
  (setq org-agenda-confirm-kill 2)

  (setq org-deadline-warning-days 3)
#+END_SRC

*** Habits
#+BEGIN_SRC emacs-lisp
(require 'org-habit)
#+END_SRC

*** Capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    '(("i" "New TODO to Uncategorized TODOs" entry (file+headline 
      "~/Dropbox/org_files/da_guai.org" "Uncategorized TODOs")
      "* TODO %?" :kill-buffer t)
  
    ("n" "New note to notes.org" entry (file 
     "~/Dropbox/org_files/notes.org")
     "* %T\n\n%i%?" :kill-buffer t :prepend t :empty-lines 1)
  
    ("w" "New work note" entry (file 
      "~/Dropbox/org_files/worknotes.org")
      "* %T\n\n%i%?" :kill-buffer t :prepend t :empty-lines 1)
  
    ("d" "New daydayup entry" entry (file 
      "~/Dropbox/org_files/daydayup.org")
      "* %T\n\n%?" :kill-buffer t :prepend t :empty-lines 1)))
#+END_SRC

*** Sync

The code below runs a python script that parses the tasks in my org files
and saves them in .taskpaper format to a file that can be accessed on my 
phone.

#+BEGIN_SRC emacs-lisp
  (defun sync-to-taskpaper ()
    "Sync org file to taskpaper file for mobile access"
    (when (file-equal-p buffer-file-name "/home/ethan/Dropbox/org_files/da_guai.org")
      (shell-command "~/corgi.sh taskpapersync")))

  (add-hook 'after-save-hook #'sync-to-taskpaper)

  (defun sync-with-corgi ()
    "Sync org file with to_sync.txt from corgi capture and mobile capture"
    (when (window-system nil)
      (message (shell-command-to-string "~/corgi.sh orgsync"))))

  (add-hook 'after-init-hook #'sync-with-corgi)
#+END_SRC

*** Org-crypt

#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
(setq org-crypt-key nil)

;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.

;; Auto-saving does not cooperate with org-crypt.el: so you need
;; to turn it off if you plan to use org-crypt.el quite often.
;; Otherwise, you’ll get an (annoying) message each time you
;; start Org.
;; To turn it off only locally, you can insert this:
;;
;; # -*- buffer-auto-save-file-name: nil; -*-
#+END_SRC

*** make things look nice
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
#+END_SRC

*** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (sh . t)))
#+END_SRC
** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :defer t
    :config
    (setq deft-directory "~/Dropbox/org_files")
    (setq deft-default-extension "org")
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filename-as-title t)
    (setq deft-use-filter-string-for-filename t)
    :bind (("C-c d" . deft)))
  ;;(setq deft-auto-save-interval 0)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :diminish projectile-mode
  :config
  (progn
    (setq projectile-enable-caching t)  
    (setq projectile-indexing-method 'alien)
    (setq projectile-completion-system 'default)
    (setq projectile-switch-project-action 'helm-projectile)
    (projectile-global-mode)))

(use-package helm-projectile
  :ensure t
  :defer t
  :init
  (helm-projectile-on))
#+END_SRC

** Navigation
*** Custom function for movement
#+BEGIN_SRC emacs-lisp 
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line) 
#+END_SRC

*** Helm-swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure t
  :init
  (setq helm-multi-swoop-edit-save t)
  (setq helm-swoop-move-to-line-cycle t)
  (setq helm-swoop-use-line-number-face t)
  ;; disable pre-input, but set input to selection if there is one
  (setq helm-swoop-pre-input-function
	(lambda () ""))
  :bind (("C-s" . helm-swoop))
  )
#+END_SRC

*** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (require 'helm-config)
    (helm-mode 1)
    (setq helm-recentf-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-completion-in-region-fuzzy-match t
        helm-mode-fuzzy-match t)
    (setq helm-source-recentf 
    (helm-make-source "Recentf" 'helm-recentf-source
      :fuzzy-match t))
    :bind (("C-x b" . helm-mini)
           ("C-x f" . helm-recentf)
           ("M-y" . helm-show-kill-ring)))
#+END_SRC
  
*** Ace-jump-mode
#+BEGIN_SRC emacs-lisp
;;
;; ace jump mode major function
;; 
(add-to-list 'load-path "/home/ethan/.emacs.d/elisp/ace-jump-mode/")
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)

;; you can select the key you prefer to
;;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(global-set-key (kbd "M-s") 'ace-jump-mode)

;; 
;; enable a more powerful jump back function from ace jump mode
;;
(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(setq ace-jump-mode-submode-list '(ace-jump-char-mode ace-jump-line-mode ace-jump-word-mode))
#+END_SRC

*** Bookmarks
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-xrj" 'bookmark-jump)
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (add-hook 'term-mode-hook (lambda()
				(setq yas-dont-activate t)))
    (yas-global-mode 1)) 
#+END_SRC

** Languages
*** Python
#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-line-or-region ()
  "Comments or uncomments the current line or region."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position))))

(global-set-key (kbd "M-;") 'comment-or-uncomment-line-or-region)

(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  (setq elpy-rpc-backend "rope")  ; "jedi" is another possibility
  (elpy-use-ipython)
  (setq elpy-rgrep-file-pattern "*.py *.pyx *.kv *.rst")
  (add-to-list 'auto-mode-alist '("\\.pyx\\'" . python-mode))
  (add-to-list 'auto-mode-alist '("\\.pdbrc\\'" . python-mode))
  (setenv "PYTHONPATH" "/home/ethan/Dropbox/development/kivy_fork/kivy")
  (setq visual-line-mode -1)
  (add-hook 'python-mode-hook 'linum-mode)
  (setq python-check-command "flake8")
  )
#+END_SRC

**** Pdb
#+BEGIN_SRC emacs-lisp 
(add-hook 'gud-mode-hook 'hl-line-mode)
#+END_SRC
*** Kivy-mode
#+BEGIN_SRC emacs-lisp
(use-package kivy-mode
  :ensure t
  :disabled t
  :init
  (add-hook 'kivy-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-c C-s") 'elpy-rgrep-symbol))))
#+END_SRC

*** Yaml-mode
#+BEGIN_SRC emacs-lisp 
(use-package yaml-mode
  :ensure t	
  :config
  (add-hook 'yaml-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-c C-s") 'elpy-rgrep-symbol)))
  (add-to-list 'auto-mode-alist '("\\.kv\\'" . yaml-mode))
  )
#+END_SRC

*** Lisp
#+BEGIN_SRC emacs-lisp
(add-hook 'lisp-mode-hook 'auto-complete)
#+END_SRC

**** Slime
#+BEGIN_SRC emacs-lisp 
(setq inferior-lisp-program "/usr/bin/sbcl")
#+END_SRC

**** Eldoc
#+BEGIN_SRC emacs-lisp 
(use-package "eldoc"
  :ensure t
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :defer t
  :init
  (progn
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)))
#+END_SRC

** Version control
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    :bind ("C-c g" . magit-status))
#+END_SRC

*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter+
  :ensure t
  :disabled t
  :init
  (global-git-gutter+-mode)
  :config
  (use-package git-gutter-fringe+
    :ensure t)
  :bind (("<f8>" . git-gutter+-next-hunk)
  	 ("<f7>" . git-gutter+-previous-hunk)
  	 ("C-x v =" . git-gutter+-show-hunk)
  	 ("C-?" . git-gutter+-revert-hunk)
  	 )
  :diminish (git-gutter+-mode . "gg")
  )
#+END_SRC

*** Diff-hl
#+BEGIN_SRC emacs-lisp 
(use-package diff-hl
  :ensure t
  :init
  (global-diff-hl-mode t)
  ;; :bind (("<f8>" . diff-hl-next-hunk)
  ;; 	 ("<f7>" . diff-hl-previous-hunk)
  ;; 	 ("C-x v =" . diff-hl-diff-goto-hunk)
  ;; 	 ("C-?" . diff-hl-revert-hunk)
  ;; 	 ) 
  )
#+END_SRC
** Editing
*** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("M-SPC" . er/expand-region))
#+END_SRC

*** Syntax-subword

This mode allows more fine-grained movement and editing commands

#+BEGIN_SRC emacs-lisp
(use-package syntax-subword
  :ensure t
  :init
  (setq syntax-subword-skip-spaces t)
  :config
  (global-syntax-subword-mode))
#+END_SRC

*** Wrap-region
#+BEGIN_SRC emacs-lisp 
(use-package wrap-region
  :ensure t
  :config
  (wrap-region-add-wrappers
   '(("(" ")" nil (python-mode org-mode lisp-mode))
     ("'" "'" nil python-mode)
     ("\"" "\"" nil (org-mode python-mode lisp-mode))))
  (add-hook 'org-mode-hook 'wrap-region-mode)
  (add-hook 'python-mode-hook 'wrap-region-mode)
  (add-hook 'lisp-mode-hook 'wrap-region-mode))
#+END_SRC

*** Multiple-cursors
#+BEGIN_SRC emacs-lisp 
(use-package multiple-cursors
  :ensure t
  :bind (("M-N" . mc/mark-next-like-this)
	 ("M-P". mc/mark-previous-like-this)))
#+END_SRC

*** Fly spell
#+BEGIN_SRC emacs-lisp
  ;; Enable flyspell-mode
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook  'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC
  
*** Auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (require 'auto-complete-config)
    (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
    (ac-config-default))
#+END_SRC
*** Undo-tree
#+BEGIN_SRC emacs-lisp 
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
  )
#+END_SRC

*** Editor-config
#+BEGIN_SRC emacs-lisp
(load "editorconfig")
(editorconfig-mode 1)
#+END_SRC
** Work
#+BEGIN_SRC emacs-lisp
(setq is-work (equal system-name "ethan-work"))
(when is-work
  (load "~/.emacs.d/work.el"))
#+END_SRC

** Terminal
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :ensure t
  :bind (("<f10>" . sane-term-create)))
#+END_SRC

*** Open terminal from emacs
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "<f12>") (kbd "M-& terminator"))
(add-to-list 'display-buffer-alist (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp 
;; Move between windows with shift and arrow  
(windmove-default-keybindings)
#+END_SRC

*** Split windows and switch at the same time
From Daniel Mai https://github.com/danielmai/.emacs.d/blob/master/config.org
#+BEGIN_SRC emacs-lisp 
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC

*** Winner-mode!
#+BEGIN_SRC emacs-lisp 
(winner-mode 1)
#+END_SRC

*** Fullframe
#+BEGIN_SRC emacs-lisp 
(use-package fullframe
  :ensure t
  :init
  (fullframe magit-status magit-mode-quit-window)
  (fullframe projectile-vc magit-mode-quit-window)
  (fullframe magit-diff magit-quit-window)
  (fullframe magit-diff-unstaged magit-quit-window)
  (fullframe magit-diff magit-mode-quit-window))
#+END_SRC


** TEMP
#+BEGIN_SRC emacs-lisp 

#+END_SRC
