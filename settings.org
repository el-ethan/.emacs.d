Emacs configuration

* Load path
#+BEGIN_SRC emacs-lisp

;; Emacs lisp files
(add-to-list 'load-path "~/.emacs.d/elisp/")

#+END_SRC
* General

#+BEGIN_SRC emacs-lisp

  ;; No scratch buffer message
  (setq initial-scratch-message nil)
  
  ;; Send customizations to another file and load that file
  (setq custom-file "~/.emacs.d/customizations.el")
  (load custom-file)
  
  ;; Set typeface to 18.0
  (set-face-attribute 'default nil :height 180)
  
  ;; Turn column number on by default
  (setq column-number-mode t)
  
  ;; Save backups elsewhere
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  
  ;; Enable show-paren-mode
  (show-paren-mode 1)
  
  ;; Make things look nice when in windowed emacs
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (set-frame-size (selected-frame) 85 90))
  
  ;; Enable word-wrapping
  (global-visual-line-mode t)
  
#+END_SRC
  
* Indentation

#+BEGIN_SRC emacs-lisp

;; Set tabs to four spaces
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)

#+END_SRC

* Org
** General settings

#+BEGIN_SRC emacs-lisp

(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

;; Open .org and .txt files in org-mode
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

;; This makes it so I can have check boxes auto-uncheck when 
;; repeating task is completed              

(require 'org-checklist)

#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  
  ;; Block agenda view for agenda and unscheduled tasks
  (setq org-agenda-custom-commands 
    '(("1" "Agenda and unscheduled tasks"
       ((tags "-DEADLINE={.+}/+TODO")
        (agenda "")))
      ("2" "Mobile tasks"
       ((tags "-DEADLINE={.+}/+TODO")
        (agenda ""))
        ((org-agenda-prefix-format "- ")
         (org-agenda-todo-keyword-format "")
         (org-agenda-start-on-weekday nil)
         (org-agenda-ndays 3)
         (org-deadline-warning-days 0))
         ("~/Dropbox/org_files/taskpaper_files/da_guai.taskpaper"))))
         
  (setq org-agenda-files '("~/Dropbox/org_files/da_guai.org"
                           "~/Dropbox/org_files/learn.org")) 
  
  ;; Only ask for confirmation of kills within agenda 
  ;; only if TODO spans more than 2 lines         
  (setq org-agenda-confirm-kill 2)
  
  (setq org-deadline-warning-days 3)
  
#+END_SRC
** Capture templates

#+BEGIN_SRC emacs-lisp

(setq org-capture-templates
  '(("i" "New TODO to Inbox" entry (file+headline 
    "~/Dropbox/org_files/da_guai.org" "Inbox")
    "* TODO %?" :kill-buffer t)

  ("l" "New thing to learn" entry (file 
    "~/Dropbox/org_files/learn.org")
    "* %?" :kill-buffer t)

  ("d" "New journal entry" entry (file 
    "~/Dropbox/org_files/daydayup.org")
    "* %T\n\n%?" :kill-buffer t :prepend t :empty-lines 1)

  ("n" "Notes" plain (file 
    "~/Dropbox/org_files/notes.org")
    "----------%T----------\n\n%?" :kill-buffer t :prepend t :empty-lines 1)))

#+END_SRC

* Deft

#+BEGIN_SRC emacs-lisp

(setq deft-directory "~/Dropbox/gnotes")
(setq deft-extension "txt")
(setq deft-text-mode 'org-mode)
(setq deft-use-filename-as-title t)
(setq deft-auto-save-interval 0)

(global-set-key (kbd "C-c d") 'deft)

#+END_SRC

* MELPA

#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.org/packages/") t)
(when (< emacs-major-version 24)
   ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)

#+END_SRC

* Fly Spell

#+BEGIN_SRC emacs-lisp
  
  ;; Enable flyspell-mode
  
  (dolist (hook '(org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1)))) 
  
  ;; Enable flyspell for Python code comments, but not Python code
  (add-hook 'python-mode-hook
            (lambda ()
              (flyspell-prog-mode)))
#+END_SRC

* Hotkeys

#+BEGIN_SRC emacs-lisp

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; Open this config file
(global-set-key (kbd "C-c s") 
  (lambda () (interactive) (find-file "~/.emacs.d/settings.org")))

;; Hotkeys for capture templates

(define-key global-map "\C-ci" ;inbox
  (lambda () (interactive) (org-capture nil "i")))
(define-key global-map "\C-cnn" ;new note
  (lambda () (interactive) (org-capture nil "n")))

#+END_SRC

* Auto-complete

#+BEGIN_SRC emacs-lisp

(require 'auto-complete)
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(global-auto-complete-mode t)

#+END_SRC

* Fill-column-indicator
#+BEGIN_SRC emacs-lisp

(require 'fill-column-indicator)
(define-globalized-minor-mode
  global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode t)
(setq-default fill-column 80)

#+END_SRC

